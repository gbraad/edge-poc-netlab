---
apiVersion: v1
kind: ConfigMap
metadata:
  name: ironic-bin
data:
  db-init.sh: |    
    #!/bin/bash
    apt-get update
    apt-get -y install mysql-client

    # Create database
    mysql -h ${ROOT_DB_HOST} -u ${ROOT_DB_USER} -p${ROOT_DB_PASSWORD} -e "CREATE DATABASE IF NOT EXISTS ${USER_DB_DATABASE}"
    echo "Created database ${USER_DB_DATABASE}"

    # Create user
    mysql -h ${ROOT_DB_HOST} -u ${ROOT_DB_USER} -p${ROOT_DB_PASSWORD} -e "CREATE USER IF NOT EXISTS ${USER_DB_USER}@'%' IDENTIFIED BY '${USER_DB_PASSWORD}'"
    echo "Created user ${USER_DB_USER}"

    # Grant permissions
    mysql -h ${ROOT_DB_HOST} -u ${ROOT_DB_USER} -p${ROOT_DB_PASSWORD} -e "GRANT ALL PRIVILEGES ON ${USER_DB_DATABASE}.* TO '${USER_DB_USER}'@'%'; FLUSH PRIVILEGES"
    echo "Granted privileges to ${USER_DB_USER} for ${USER_DB_DATABASE}"

  db-sync.sh: |
    #!/bin/bash
    set -ex

    apt-get update
    apt-get -y install python-pip
    pip install --upgrade PyMySQL

    ironic-dbsync upgrade

  ironic-api.sh: |
    #!/bin/bash
    set -ex

    pip install --upgrade PyMySQL

    COMMAND="${@:-start}"
    
    function start () {
      exec ironic-api \
            --config-file /etc/ironic/ironic.conf
    }
    
    function stop () {
      kill -TERM 1
    }
    
    $COMMAND

  ironic-conductor.sh: |
    #!/bin/bash
    set -ex

    pip install --upgrade PyMySQL

    mkdir -p /var/lib/pod_data/ironic/images
    mkdir -p /var/lib/pod_data/ironic/master_images

    exec ironic-conductor \
          --config-file /etc/ironic/ironic.conf \
          --config-file /tmp/pod-shared/conductor-local-ip.conf

  ironic-conductor-init.sh: |
    #!/bin/bash
    set -ex
    
    tee /tmp/pod-shared/conductor-local-ip.conf << EOF
    [DEFAULT]

    # IP address of this host. If unset, will determine the IP
    # programmatically. If unable to do so, will use "127.0.0.1".
    # (string value)
    my_ip = ${PXE_IP}
    
    [pxe]
    # IP address of ironic-conductor node's TFTP server. (string
    # value)
    tftp_server = ${PXE_IP}
    
    [deploy]
    # ironic-conductor node's HTTP server URL. Example:
    # http://192.1.2.3:8080 (string value)
    # from .deploy.ironic.http_url
    http_url = http://${PXE_IP}:8081
    EOF
    
  ironic-conductor-pxe.sh: |
    #!/bin/bash
    set -ex
    
    ln -s /var/lib/pod_data/tftpboot /tftpboot
    
    chown -R nobody /tftpboot
    chmod -R a+rx /tftpboot
    
    exec /usr/sbin/in.tftpd \
      --verbose \
      --verbosity 7 \
      --foreground \
      --user root \
      --address 0.0.0.0:69 \
      --map-file /tftp-map-file /tftpboot
    
  ironic-conductor-pxe-init.sh: |
    #!/bin/bash
    set -ex
    
    #NOTE(portdirect): this works round a limitation in Kolla images
    if ! dpkg -l ipxe; then
      apt-get update
      apt-get install ipxe -y
    fi
    
    mkdir -p /var/lib/pod_data/tftpboot
    mkdir -p /var/lib/pod_data/tftpboot/master_images
    
    for FILE in undionly.kpxe ipxe.efi; do
      if [ -f /usr/lib/ipxe/$FILE ]; then
        cp -v /usr/lib/ipxe/$FILE /var/lib/pod_data/tftpboot
      fi
    done

  ironic-conductor-http.sh: |
    #!/bin/bash
    set -ex
    
    mkdir -p /var/lib/pod_data/httpboot
    cp -v /tmp/pod-shared/nginx.conf /etc/nginx/nginx.conf
    exec nginx -g 'daemon off;'

  ironic-conductor-http-init.sh: |
    #!/bin/bash
    set -ex
    
    sed "s|OSH_PXE_IP|${PXE_IP}|g" /etc/nginx/nginx.conf > /tmp/pod-shared/nginx.conf

  rabbit-init.sh: |    
    #!/bin/bash
    set -e
    # Extract connection details
    RABBIT_HOSTNAME=$(echo "${RABBITMQ_ADMIN_CONNECTION}" | \
      awk -F'[@]' '{print $2}' | \
      awk -F'[:/]' '{print $1}')
    RABBIT_PORT=$(echo "${RABBITMQ_ADMIN_CONNECTION}" | \
      awk -F'[@]' '{print $2}' | \
      awk -F'[:/]' '{print $2}')

    # Extract Admin User creadential
    RABBITMQ_ADMIN_USERNAME=$(echo "${RABBITMQ_ADMIN_CONNECTION}" | \
      awk -F'[@]' '{print $1}' | \
      awk -F'[//:]' '{print $4}')
    RABBITMQ_ADMIN_PASSWORD=$(echo "${RABBITMQ_ADMIN_CONNECTION}" | \
      awk -F'[@]' '{print $1}' | \
      awk -F'[//:]' '{print $5}')
    
    # Extract User creadential
    RABBITMQ_USERNAME=$(echo "${RABBITMQ_USER_CONNECTION}" | \
      awk -F'[@]' '{print $1}' | \
      awk -F'[//:]' '{print $4}')
    RABBITMQ_PASSWORD=$(echo "${RABBITMQ_USER_CONNECTION}" | \
      awk -F'[@]' '{print $1}' | \
      awk -F'[//:]' '{print $5}')
    
    # Extract User vHost
    RABBITMQ_VHOST=$(echo "${RABBITMQ_USER_CONNECTION}" | \
      awk -F'[@]' '{print $2}' | \
      awk -F'[:/]' '{print $3}')
    
    function rabbitmqadmin_cli () {
      rabbitmqadmin \
        --host="${RABBIT_HOSTNAME}" \
        --port="${RABBIT_PORT}" \
        --username="${RABBITMQ_ADMIN_USERNAME}" \
        --password="${RABBITMQ_ADMIN_PASSWORD}" \
        ${@}
    }
    
    echo "Managing: User: ${RABBITMQ_USERNAME}"
    rabbitmqadmin_cli \
      declare user \
      name="${RABBITMQ_USERNAME}" \
      password="${RABBITMQ_PASSWORD}" \
      tags="user"
    
    echo "Managing: vHost: ${RABBITMQ_VHOST}"
    rabbitmqadmin_cli \
      declare vhost \
      name="${RABBITMQ_VHOST}"
    
    echo "Managing: Permissions: ${RABBITMQ_USERNAME} on ${RABBITMQ_VHOST}"
    rabbitmqadmin_cli \
      declare permission \
      vhost="${RABBITMQ_VHOST}" \
      user="${RABBITMQ_USERNAME}" \
      configure=".*" \
      write=".*" \
      read=".*"

    if [ ! -z "$RABBITMQ_AUXILIARY_CONFIGURATION" ]
    then
      echo "Applying additional configuration"
      echo "${RABBITMQ_AUXILIARY_CONFIGURATION}" > /tmp/rmq_definitions.json
      rabbitmqadmin_cli import /tmp/rmq_definitions.json
    fi
