---
apiVersion: v1
kind: ConfigMap
metadata:
  name: ironic-bin
data:
  db-init.py: |    
    #!/usr/bin/env python
    import logging
    import os
    from sqlalchemy import create_engine

    # configure logging
    logger = logging.getLogger('Ironic DB init')
    logger.setLevel(logging.DEBUG)
    ch = logging.StreamHandler()
    ch.setLevel(logging.DEBUG) 
    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
    ch.setFormatter(formatter) 
    logger.addHandler(ch)

    # generate connection string for root
    root_engine_url = "mysql+pymysql://%s:%s@%s:3306/mysql?charset=utf8mb4" % (
        os.environ['ROOT_DB_USER'],
        os.environ['ROOT_DB_PASSWORD'],
        os.environ['ROOT_DB_HOST'])
    logger.critical(root_engine_url)

    try:
        root_engine = create_engine(root_engine_url)
    except:
        logger.critical('Could not connect to database as root user')
        raise

    try:
        root_engine.execute("CREATE DATABASE IF NOT EXISTS %s" % os.environ['USER_DB_DATABASE'])

        root_command = "CREATE USER IF NOT EXISTS `{0}`@\'{1}\' IDENTIFIED BY \'{2}\'".format(os.environ['USER_DB_USER'], '%%', os.environ['USER_DB_PASSWORD'])
        logger.critical(root_command)
        root_engine.execute(root_command)
        root_command = "GRANT ALL PRIVILEGES ON `{0}`.* TO \'{1}\'@\'{2}\'".format(os.environ['USER_DB_DATABASE'], os.environ['USER_DB_USER'], '%%')
        root_engine.execute(root_command)
    except:
        logger.critical("Failure creating database and user for ironic")
        raise
    logger.info("Finished db management")

  db-sync.sh: |
    #!/bin/bash
    set -ex

    #pip install --upgrade PyMySQL

    ironic-dbsync --debug --config-file=/etc/ironic/ironic.conf upgrade

  ironic-api.sh: |
    #!/bin/bash
    set -ex

    COMMAND="${@:-start}"
    
    function start () {
      exec ironic-api \
            --config-file /etc/ironic/ironic.conf
    }
    
    function stop () {
      kill -TERM 1
    }
    
    $COMMAND

  ironic-conductor.sh: |
    #!/bin/bash
    set -ex

    mkdir -p /var/lib/pod_data/ironic/images
    mkdir -p /var/lib/pod_data/master_images
    mkdir -p /var/lib/pod_data/ironic_images

    exec ironic-conductor \
          --config-file /etc/ironic/ironic.conf \
          --config-file /tmp/pod-shared/conductor-local-ip.conf


  ironic-conductor-init.sh: |
    #!/bin/bash
    set -ex

    if [ "x" == "x${PXE_NIC}" ]; then
        # just use the first available nic
        $PXE_NIC=$(ip link | awk -F: '$0 !~ "lo|vir|wl|^[^0-9]"{print $2;getline}' | head -n 1 | sed -e 's/^[[:space:]]*//')
    fi

    function net_pxe_ip {
        net_pxe_addr=$(ip addr | awk "/inet / && /${PXE_NIC}/{print \$2; exit }")
        echo $net_pxe_addr | awk -F '/' '{ print $1; exit }'
    }
    PXE_IP=$(net_pxe_ip)

    if [ "x" == "x${PXE_IP}" ]; then
        echo "Could not find IP for pxe to bind to"
        exit 1
    fi
    
    tee /tmp/pod-shared/conductor-local-ip.conf << EOF
    [DEFAULT]

    # IP address of this host. If unset, will determine the IP
    # programmatically. If unable to do so, will use "127.0.0.1".
    # (string value)
    my_ip = ${PXE_IP}
    
    [pxe]
    # IP address of ironic-conductor node's TFTP server. (string
    # value)
    tftp_server = ${PXE_IP}
    
    [deploy]
    # ironic-conductor node's HTTP server URL. Example:
    # http://192.1.2.3:8080 (string value)
    # from .deploy.ironic.http_url
    http_url = http://${PXE_IP}:8081
    EOF
    
  ironic-conductor-pxe.sh: |
    #!/bin/bash
    set -ex
    
    ln -s /var/lib/pod_data/tftpboot /tftpboot
    
    chown -R nobody /tftpboot
    chmod -R a+rx /tftpboot
    
    exec /usr/sbin/in.tftpd \
      --verbose \
      --verbosity 7 \
      --foreground \
      --user root \
      --address 0.0.0.0:69 \
      --map-file /tftp-map-file /tftpboot
    
  ironic-conductor-pxe-init.sh: |
    #!/bin/bash
    set -ex
    
    #NOTE(portdirect): this works round a limitation in Kolla images
    #if ! dpkg -l ipxe; then
    #  apt-get update
    #  apt-get install ipxe -y
    #fi
    
    mkdir -p /var/lib/pod_data/tftpboot
    mkdir -p /var/lib/pod_data/tftpboot/master_images
    
    for FILE in undionly.kpxe ipxe.efi; do
      if [ -f /usr/lib/ipxe/$FILE ]; then
        cp -v /usr/lib/ipxe/$FILE /var/lib/pod_data/tftpboot
      fi
    done

  ironic-conductor-http.sh: |
    #!/bin/bash
    set -ex
    
    mkdir -p /var/lib/pod_data/httpboot
    cp -v /tmp/pod-shared/nginx.conf /etc/nginx/nginx.conf
    exec nginx -g 'daemon off;'

  ironic-conductor-http-init.sh: |
    #!/bin/bash
    set -ex
    
    sed "s|OSH_PXE_IP|${PXE_IP}|g" /etc/nginx/nginx.conf > /tmp/pod-shared/nginx.conf

  rabbit-init.sh: |    
    #!/bin/bash
    set -e
    # Extract connection details
    RABBIT_HOSTNAME=$(echo "${RABBITMQ_ADMIN_CONNECTION}" | \
      awk -F'[@]' '{print $2}' | \
      awk -F'[:/]' '{print $1}')
    RABBIT_PORT=$(echo "${RABBITMQ_ADMIN_CONNECTION}" | \
      awk -F'[@]' '{print $2}' | \
      awk -F'[:/]' '{print $2}')

    # Extract Admin User creadential
    RABBITMQ_ADMIN_USERNAME=$(echo "${RABBITMQ_ADMIN_CONNECTION}" | \
      awk -F'[@]' '{print $1}' | \
      awk -F'[//:]' '{print $4}')
    RABBITMQ_ADMIN_PASSWORD=$(echo "${RABBITMQ_ADMIN_CONNECTION}" | \
      awk -F'[@]' '{print $1}' | \
      awk -F'[//:]' '{print $5}')
    
    # Extract User creadential
    RABBITMQ_USERNAME=$(echo "${RABBITMQ_USER_CONNECTION}" | \
      awk -F'[@]' '{print $1}' | \
      awk -F'[//:]' '{print $4}')
    RABBITMQ_PASSWORD=$(echo "${RABBITMQ_USER_CONNECTION}" | \
      awk -F'[@]' '{print $1}' | \
      awk -F'[//:]' '{print $5}')
    
    # Extract User vHost
    RABBITMQ_VHOST=$(echo "${RABBITMQ_USER_CONNECTION}" | \
      awk -F'[@]' '{print $2}' | \
      awk -F'[:/]' '{print $3}')
    
    function rabbitmqadmin_cli () {
      rabbitmqadmin \
        --host="${RABBIT_HOSTNAME}" \
        --port="${RABBIT_PORT}" \
        --username="${RABBITMQ_ADMIN_USERNAME}" \
        --password="${RABBITMQ_ADMIN_PASSWORD}" \
        ${@}
    }
    
    echo "Managing: User: ${RABBITMQ_USERNAME}"
    rabbitmqadmin_cli \
      declare user \
      name="${RABBITMQ_USERNAME}" \
      password="${RABBITMQ_PASSWORD}" \
      tags="user"
    
    echo "Managing: vHost: ${RABBITMQ_VHOST}"
    rabbitmqadmin_cli \
      declare vhost \
      name="${RABBITMQ_VHOST}"
    
    echo "Managing: Permissions: ${RABBITMQ_USERNAME} on ${RABBITMQ_VHOST}"
    rabbitmqadmin_cli \
      declare permission \
      vhost="${RABBITMQ_VHOST}" \
      user="${RABBITMQ_USERNAME}" \
      configure=".*" \
      write=".*" \
      read=".*"

    if [ ! -z "$RABBITMQ_AUXILIARY_CONFIGURATION" ]
    then
      echo "Applying additional configuration"
      echo "${RABBITMQ_AUXILIARY_CONFIGURATION}" > /tmp/rmq_definitions.json
      rabbitmqadmin_cli import /tmp/rmq_definitions.json
    fi
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: dhcp-bin
data:
  dhcp-server-init.sh: |
    #!/bin/bash
    set -ex

    # strip hosts in lines and output content
    COUNTER=1
    while read -r line; do
      echo "host host${COUNTER} { hardware ethernet ${line}; }" >> /data/hosts/hosts.conf    
      COUNTER=$[$COUNTER+1]
    done <<< "${DHCP_HOSTS}"

    # now generate the entry for the zone
    if [ "x" == "x${PXE_NIC}" ]; then
        # just use the first available nic
        $PXE_NIC=$(ip link | awk -F: '$0 !~ "lo|vir|wl|^[^0-9]"{print $2;getline}' | head -n 1 | sed -e 's/^[[:space:]]*//')
    fi

    function net_pxe_ip {
        net_pxe_addr=$(ip addr | awk "/inet / && /${PXE_NIC}/{print \$2; exit }")
        echo $net_pxe_addr | awk -F '/' '{ print $1; exit }'
    }
    PXE_IP=$(net_pxe_ip)

    # given the ip, extract subnet
    IP_FRAGMENT=${PXE_IP%.*}
    SUBNET="${IP_FRAGMENT}.0"
    BROADCAST="${IP_FRAGMENT}.255"

    tee /data/zones/zone.conf << EOF
    subnet ${SUBNET} netmask 255.255.255.0 {
      option subnet-mask 255.255.255.0;
      option routers ${PXE_IP};
      option broadcast-address ${BROADCAST};
      option domain-name-servers ${PXE_IP};
      option domain-name "${CLUSTER_DOMAIN}";
      range dynamic-bootp ${IP_FRAGMENT}.${INITIAL_IP_RANGE} ${IP_FRAGMENT}.${FINAL_IP_RANGE};
      deny unknown-clients;
      default-lease-time 21600;
      max-lease-time 43200;

      # ipxe boot
      if exists user-class and option user-class = "iPXE" {
          filename "http://${PXE_IP}:8081/boot.ipxe";
      } else {
          filename "undionly.kpxe";
          next-server ${PXE_IP};
      }      
    } 
    EOF

  dhcp-server.sh: |
    #! /bin/bash
    yum install -y dhcp

    dhcpd -f -d -cf /data/dhcpd.conf -user dhcpd -group dhcpd --no-pid ${PXE_NIC}
